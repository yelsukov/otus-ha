version: '2.4'

services:
  node01:
    container_name: "node01"
    build:
      context: backend
    restart: always
    environment:
      JWT_SECRET: "${JWT_SECRET}"
      DB_HOST: "haproxy"
      DB_USER: "${MASTER_USER}"
      DB_PASSWORD: "${MASTER_PASSWORD}"
      DB_NAME: "${DB_NAME}"
      BUS_DSN: "${BUS_DSN}"
      BUS_TOPIC: "${BUS_TOPIC}"
      DEBUG: "${DEBUG}"
      NEWS_TOKEN: "${NEWS_TOKEN}"
      NEWS_URL: "news:${NEWS_PORT}"
      DIALOG_TOKEN: "${DIALOG_TOKEN}"
      DIALOG_URL: "http://dialogue:${DIALOG_PORT}"
      MIGRATIONS_HOST: "master_db"
      MIGRATIONS_USER: "${MASTER_USER}"
      MIGRATIONS_PASS: "${MASTER_PASSWORD}"
    networks:
      - inner
      - storage
      - queue
      - entry

  node02:
    container_name: "node02"
    build:
      context: backend
    restart: always
    environment:
      JWT_SECRET: "${JWT_SECRET}"
      DB_HOST: "haproxy"
      DB_USER: "${MASTER_USER}"
      DB_PASSWORD: "${MASTER_PASSWORD}"
      DB_NAME: "${DB_NAME}"
      BUS_DSN: "${BUS_DSN}"
      BUS_TOPIC: "${BUS_TOPIC}"
      DEBUG: "${DEBUG}"
      NEWS_TOKEN: "${NEWS_TOKEN}"
      NEWS_URL: "news:${NEWS_PORT}"
      DIALOG_TOKEN: "${DIALOG_TOKEN}"
      DIALOG_URL: "http://dialogue:${DIALOG_PORT}"
      SLAVE: "true"
    depends_on:
      - node01
    networks:
      - inner
      - storage
      - queue
      - entry

  nginx:
    image: nginx:1.19.6-alpine
    container_name: nginx
    restart: on-failure
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 80:80
    depends_on:
      - node01
      - node02
    networks:
      - entry

networks:
  queue:
    name: queue
    external: true
  storage:
    name: storage
    external: true
  inner:
    name: inner
  entry:
    name: entry