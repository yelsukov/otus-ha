version: '2.4'

services:

  ## Shards
  mongo01Mstr:
    image: mongo:4.4.3
    command: mongod --port 27017 --shardsvr --replSet shard01 --oplogSize 16
    healthcheck:
      test: "bash -c \"if mongo --port 27017 --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0: 2)'; then exit 0; fi; exit 1;\""
      interval: 1s
      timeout: 5s
      retries: 30
    networks:
      - dlg
  mongo01Repl:
    image: mongo:4.4.3
    command: mongod --port 27017 --shardsvr --replSet shard01 --oplogSize 16
    healthcheck:
      test: "bash -c \"if mongo --port 27017 --eval 'quit(db.runCommand({ping:1}).ok?0:2)'; then exit 0; fi; exit 1;\""
      interval: 1s
      timeout: 5s
      retries: 30
    networks:
      - dlg

  mongo02Mstr:
    image: mongo:4.4.3
    command: mongod --port 27017 --shardsvr --replSet shard02 --oplogSize 16
    healthcheck:
      test: "bash -c \"if mongo --port 27017 --eval 'quit(db.runCommand({ping:1}).ok?0:2)'; then exit 0; fi; exit 1;\""
      interval: 1s
      timeout: 5s
      retries: 30
    networks:
      - dlg
  mongo02Repl:
    image: mongo:4.4.3
    command: mongod --port 27017 --shardsvr --replSet shard02 --oplogSize 16
    healthcheck:
      test: "bash -c \"if mongo --port 27017 --eval 'quit(db.runCommand({ping:1}).ok?0:2)'; then exit 0; fi; exit 1;\""
      interval: 1s
      timeout: 5s
      retries: 30
    networks:
      - dlg

  mongo03Mstr:
    image: mongo:4.4.3
    command: mongod --port 27017 --shardsvr --replSet shard03 --oplogSize 16
    healthcheck:
      test: "bash -c \"if mongo --port 27017 --eval 'quit(db.runCommand({ping:1}).ok?0:2)'; then exit 0; fi; exit 1;\""
      interval: 1s
      timeout: 5s
      retries: 30
    networks:
      - dlg
  mongo03Repl:
    image: mongo:4.4.3
    command: mongod --port 27017 --shardsvr --replSet shard03 --oplogSize 16
    healthcheck:
      test: "bash -c \"if mongo --port 27017 --eval 'quit(db.runCommand({ping:1}).ok?0:2)'; then exit 0; fi; exit 1;\""
      interval: 1s
      timeout: 5s
      retries: 30
    networks:
      - dlg

  ## Config Server
  mongoConfig:
    image: mongo:4.4.3
    command: mongod --port 27017 --configsvr --replSet configServer --oplogSize 16
    healthcheck:
      test: "bash -c \"if mongo --port 27017 --eval 'quit(db.runCommand({ping:1}).ok?0:2)'; then exit 0; fi; exit 1;\""
      interval: 1s
      timeout: 5s
      retries: 30
    networks:
      - dlg

  ## Router
  mongoRouter:
    image: mongo:4.4.3
    container_name: mongoRouter
    command: mongos --port 27017 --configdb configServer/mongoConfig:27017 --bind_ip_all
    ports:
      - 27117:27017
    depends_on:
      mongoConfig:
        condition: service_healthy
      mongo01Mstr:
        condition: service_healthy
      mongo01Repl:
        condition: service_healthy
      mongo02Mstr:
        condition: service_healthy
      mongo02Repl:
        condition: service_healthy
      mongo03Mstr:
        condition: service_healthy
      mongo03Repl:
        condition: service_healthy
    networks:
      - dlg

  # Shard starter
  sharder:
    container_name: "sharder"
    build:
      context: deployment/sharedCluster
    environment:
      DB_NAME: "${DB_NAME}"
    depends_on:
      - mongoRouter
    networks:
      - dlg

  dialogue01:
    container_name: dialogue01
    build:
      context: dialogue
      args:
        TOKEN: "${DIALOG_TOKEN}"
        VERSION: "0.0.2"
    restart: always
    ports:
      - 8009:${DIALOG_PORT}
    environment:
      MONGO_DSN: "mongodb://mongoRouter:27017"
      DB_NAME: "${DB_NAME}"
      DEBUG: "${DEBUG}"
      SERVICE_ID: "dialogue01"
      SERVICE_NAME: "dialogue"
      SERVICE_HOST: "http://dialogue01"
      SERVICE_PORT: "${DIALOG_PORT}"
      CONSUL_DSN: "consul:8500"
      ZBX_HOST: "zabbix-server"
      ZBX_PORT: 10051
      ZBX_NAME: "Zabbix server"
      REDIS_DSN: "redis:6379"
      QUEUE_DSN: "${BUS_DSN}"
      DLG_TOPIC: "dialogueBus"
      CNT_TOPIC: "counterBus"
    depends_on:
      - sharder
    networks:
      - dlg
      - queue
      - cache
      - inner

  dialogue02:
    container_name: dialogue02
    build:
      context: dialogue
      args:
        TOKEN: "${DIALOG_TOKEN}"
        VERSION: "0.0.2"
    restart: always
    ports:
      - 8010:${DIALOG_PORT}
    environment:
      MONGO_DSN: "mongodb://mongoRouter:27017"
      DB_NAME: "${DB_NAME}"
      DEBUG: "${DEBUG}"
      SERVICE_ID: "dialogue02"
      SERVICE_NAME: "dialogue"
      SERVICE_HOST: "http://dialogue02"
      SERVICE_PORT: "${DIALOG_PORT}"
      CONSUL_DSN: "consul:8500"
      ZBX_HOST: "zabbix-server"
      ZBX_PORT: 10051
      ZBX_NAME: "Zabbix server"
      REDIS_DSN: "redis:6379"
      QUEUE_DSN: "${BUS_DSN}"
      DLG_TOPIC: "dialogueBus"
      CNT_TOPIC: "counterBus"
    depends_on:
      dialogue01:
        condition: service_started
    networks:
      - dlg
      - queue
      - cache
      - inner

  counter:
    container_name: counter
    build:
      context: counter
    restart: on-failure
    environment:
      REDIS_DSN: "redis:6379"
      QUEUE_DSN: "${BUS_DSN}"
      DLG_TOPIC: "dialogueBus"
      CNT_TOPIC: "counterBus"
      DEBUG: "${DEBUG}"
    networks:
      - cache
      - queue

networks:
  dlg:
    name: dlg
  cache:
    name: cache
    external: true
  queue:
    name: queue
    external: true
  inner:
    name: inner
    external: true